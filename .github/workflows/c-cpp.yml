name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    strategy:
      matrix:
        sanitizer:
          - asan-ubsan
          - valgrind
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.6

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            meson \
            gcc \
            clang \
            pkg-config \
            libgtk-4-dev \
            libvte-2.91-gtk4-dev \
            libglib2.0-dev \
            valgrind \
            libx11-dev \
            libpango1.0-dev \
            libstartup-notification0-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libimlib2-dev \
            librsvg2-dev \
            xvfb \
            xdotool \
            x11-utils \
            libfontconfig1-dev \
            libexpat1-dev

      - name: Set up environment variables
        shell: bash
        run: |
          if [ "${{ matrix.sanitizer }}" = "asan-ubsan" ]; then
            echo "==> Building with ASan + UBSan"
            export CC=clang
            export CXX=clang++
            export CFLAGS="-g -fsanitize=address,undefined"
            export LDFLAGS="-fsanitize=address,undefined"
          else
            export CC=gcc
            export CXX=g++
            export CFLAGS="-g"
            export LDFLAGS=""
          fi

          # Set GTK_A11Y to 'none' to avoid Gtk-WARNING about accessibility bus
          export GTK_A11Y=none

          # Make these exports visible in subsequent steps
          echo "CC=$CC"         >> $GITHUB_ENV
          echo "CXX=$CXX"       >> $GITHUB_ENV
          echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=$LDFLAGS"   >> $GITHUB_ENV

      - name: Configure and build 1term
        shell: bash
        run: |
          meson setup builddir --wipe  # Configure the project
          meson compile -C builddir  # Build the project

      - name: Install the project
        shell: bash
        run: |
          sudo meson install -C builddir  # Install the built project

      - name: Set up virtual display with Xvfb
        run: |
          # Start Xvfb (virtual framebuffer) for headless testing
          Xvfb :99 &  # Start Xvfb on display :99
          export DISPLAY=:99  # Set the DISPLAY environment variable to the virtual display

      - name: Launch and Test the Application (Sanitizer check)
        shell: bash
        run: |
          # Run the application using xvfb-run for headless testing
          timeout --preserve-status 10s xvfb-run --auto-servernum --server-args="-screen 0 1280x800x24" bash -c "
            ./builddir/1term
            sleep 5  # Wait for the application to start
          " || true  # Prevent timeout exit code 124 from failing the job

          if [ '${{ matrix.sanitizer }}' = 'valgrind' ]; then
            echo 'Running Valgrind memory leak check...'
            timeout --preserve-status 10s valgrind --leak-check=full --track-origins=yes --error-exitcode=1 ./builddir/1term || true  # Prevent timeout exit code 124
            valgrind_exit_code=$?
            if [ $valgrind_exit_code -eq 1 ]; then
              echo 'Valgrind detected memory leaks!'
              exit 1  # Fail the job if memory leaks are detected
            fi
          elif [ '${{ matrix.sanitizer }}' = 'asan-ubsan' ]; then
            echo 'Running ASan/UBSan checks...'
            timeout --preserve-status 10s ./builddir/1term || true  # Prevent timeout exit code 124
          fi
